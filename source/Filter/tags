!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_JP_AUTHOR	HIGASHI Hirohito	/Twitter: @h_east/
!_TAG_PROGRAM_JP_URL	http://hp.vector.co.jp/authors/VA025040/	//
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6b1J2	//
BlockDiagram	BlockDiagram.h	/^    BlockDiagram()$/;"	f	class:BlockDiagram
BlockDiagram	BlockDiagram.h	/^    BlockDiagram(const BlockDiagram &copy)$/;"	f	class:BlockDiagram
BlockDiagram	BlockDiagram.h	/^class BlockDiagram$/;"	c
Butterworth	Butterworth.h	/^    Butterworth()$/;"	f	class:Butterworth
Butterworth	Butterworth.h	/^class Butterworth : public Filter$/;"	c
Chebycheff	Chebycheff.h	/^    Chebycheff()$/;"	f	class:Chebycheff
Chebycheff	Chebycheff.h	/^class Chebycheff : public Filter{$/;"	c
Filter	Filter.h	/^    Filter()$/;"	f	class:Filter
Filter	Filter.h	/^class Filter$/;"	c
FilterError	Filter.h	/^    FilterError(char *message)$/;"	f	class:FilterError
FilterError	Filter.h	/^class FilterError$/;"	c
FilterMode	Filter.h	/^}FilterMode;$/;"	t	typeref:enum:__anon1
PI	Butterworth.h	/^#define PI /;"	d
PI	Chebycheff.h	/^#define PI /;"	d
__BLOCK_DIAGRAM_H__	BlockDiagram.h	/^#define __BLOCK_DIAGRAM_H__$/;"	d
__BUTTERWORTH_H__	Butterworth.h	/^#define __BUTTERWORTH_H__$/;"	d
__CHEBYCHEFF_H__	Chebycheff.h	/^#define __CHEBYCHEFF_H__$/;"	d
__FILTER_H__	Filter.h	/^#define __FILTER_H__$/;"	d
acosh	Chebycheff.h	/^    double acosh(double theta){ return log(theta+sqrt((theta+1)*(theta-1))); }$/;"	f	class:Chebycheff
decisionPrototype	Butterworth.cpp	/^void Butterworth::decisionPrototype(double inPassFreq,$/;"	f	class:Butterworth
decisionPrototype	Chebycheff.cpp	/^void Chebycheff::decisionPrototype( double inPassFreq,$/;"	f	class:Chebycheff
digital2analog	Butterworth.h	/^    double digital2analog(double inOmega){ return 2*tan(inOmega\/2); }$/;"	f	class:Butterworth
digital2analog	Chebycheff.h	/^    double digital2analog(double inOmega){ return 2*tan(inOmega\/2); }$/;"	f	class:Chebycheff
getAlpha	Butterworth.cpp	/^double Butterworth::getAlpha(long i)$/;"	f	class:Butterworth
getAlpha	Chebycheff.cpp	/^double Chebycheff::getAlpha(long i)$/;"	f	class:Chebycheff
getBeta	Chebycheff.cpp	/^double Chebycheff::getBeta(long i)$/;"	f	class:Chebycheff
getCoefficientA	BlockDiagram.h	/^    const double *getCoefficientA() const{ return mCoefficientA; }$/;"	f	class:BlockDiagram
getCoefficientB	BlockDiagram.h	/^    const double *getCoefficientB() const{ return mCoefficientB; }$/;"	f	class:BlockDiagram
getCutoffFreq	Filter.cpp	/^double Filter::getCutoffFreq() const$/;"	f	class:Filter
getFilterMode	Filter.h	/^    FilterMode getFilterMode(){ return mKindFilter; }$/;"	f	class:Filter
getHighBeta	Butterworth.cpp	/^double Butterworth::getHighBeta(double inCutFreq)$/;"	f	class:Butterworth
getHighCutoffFreq	Filter.cpp	/^double Filter::getHighCutoffFreq() const$/;"	f	class:Filter
getHighGamma	Chebycheff.cpp	/^double Chebycheff::getHighGamma(double inCutFreq)$/;"	f	class:Chebycheff
getLowBeta	Butterworth.cpp	/^double Butterworth::getLowBeta(double inCutFreq)$/;"	f	class:Butterworth
getLowCutoffFreq	Filter.cpp	/^double Filter::getLowCutoffFreq() const$/;"	f	class:Filter
getLowGamma	Chebycheff.cpp	/^double Chebycheff::getLowGamma(double inCutFreq)$/;"	f	class:Chebycheff
getOrder	BlockDiagram.h	/^    int getOrder() const { return mOrder; }$/;"	f	class:BlockDiagram
getOrderNumber	Filter.h	/^    long getOrderNumber() const { return mOrderNumber; }$/;"	f	class:Filter
getPreviousSample	BlockDiagram.h	/^    double getPreviousSample(int n)$/;"	f	class:BlockDiagram
getPrototypeCutFreq	Butterworth.h	/^    double getPrototypeCutFreq() const{ return mPrototypeCutFreq; }$/;"	f	class:Butterworth
getPrototypeCutFreq	Chebycheff.h	/^    double getPrototypeCutFreq(){ return mPrototypeCutFreq; }$/;"	f	class:Chebycheff
getPrototypePassFreq	Chebycheff.h	/^    double getPrototypePassFreq(){ return mPrototypePassFreq; }$/;"	f	class:Chebycheff
getSampleRate	Butterworth.h	/^    double getSampleRate() const { return mSampleRate; }$/;"	f	class:Butterworth
getSampleRate	Chebycheff.h	/^	double getSampleRate(){ return mSampleRate; }$/;"	f	class:Chebycheff
init	BlockDiagram.cpp	/^void BlockDiagram::init(int order,const double *a,const double *b)$/;"	f	class:BlockDiagram
initBandTransferFunction	Butterworth.cpp	/^BlockDiagram *Butterworth::initBandTransferFunction$/;"	f	class:Butterworth
initBandTransferFunction	Chebycheff.cpp	/^BlockDiagram *Chebycheff::initBandTransferFunction(double inLowCutFreq,$/;"	f	class:Chebycheff
initHighTransferFunction	Butterworth.cpp	/^BlockDiagram *Butterworth::initHighTransferFunction(double inCutFreq)$/;"	f	class:Butterworth
initHighTransferFunction	Chebycheff.cpp	/^BlockDiagram *Chebycheff::initHighTransferFunction(double inCutFreq)$/;"	f	class:Chebycheff
initLowTransferFunction	Butterworth.cpp	/^BlockDiagram *Butterworth::initLowTransferFunction(double inCutFreq)$/;"	f	class:Butterworth
initLowTransferFunction	Chebycheff.cpp	/^BlockDiagram *Chebycheff::initLowTransferFunction(double inCutFreq)$/;"	f	class:Chebycheff
initPreviousSample	BlockDiagram.h	/^    void initPreviousSample(int i_iNum)$/;"	f	class:BlockDiagram
initTransferFunction	Butterworth.cpp	/^void Butterworth::initTransferFunction()$/;"	f	class:Butterworth
initTransferFunction	Chebycheff.cpp	/^void Chebycheff::initTransferFunction()$/;"	f	class:Chebycheff
inject	BlockDiagram.cpp	/^double BlockDiagram::inject(double sample)$/;"	f	class:BlockDiagram
kBandpass	Filter.h	/^	kBandpass,	\/\/ Band pass filter.$/;"	e	enum:__anon1
kHighpass	Filter.h	/^	kHighpass,	\/\/ High pass filter.$/;"	e	enum:__anon1
kLowpass	Filter.h	/^	kLowpass,	\/\/ Low  pass filter.$/;"	e	enum:__anon1
mAlpha0	Chebycheff.h	/^    double mAlpha0;$/;"	m	class:Chebycheff
mCoefficientA	BlockDiagram.h	/^    double *mCoefficientA;$/;"	m	class:BlockDiagram
mCoefficientB	BlockDiagram.h	/^    double *mCoefficientB;$/;"	m	class:BlockDiagram
mEpsilon	Chebycheff.h	/^    double mEpsilon;$/;"	m	class:Chebycheff
mHighCutoffFreq	Filter.h	/^	double mHighCutoffFreq;$/;"	m	class:Filter
mKindFilter	Filter.h	/^    FilterMode mKindFilter;$/;"	m	class:Filter
mLowCutoffFreq	Filter.h	/^    double mLowCutoffFreq;$/;"	m	class:Filter
mMessage	Filter.h	/^    char *mMessage;$/;"	m	class:FilterError
mOrder	BlockDiagram.h	/^    int mOrder;$/;"	m	class:BlockDiagram
mOrderNumber	Filter.h	/^    long mOrderNumber;$/;"	m	class:Filter
mPreviousSample	BlockDiagram.h	/^    deque< double > mPreviousSample;$/;"	m	class:BlockDiagram
mPrototypeCutFreq	Butterworth.h	/^    double mPrototypeCutFreq;$/;"	m	class:Butterworth
mPrototypeCutFreq	Chebycheff.h	/^    double mPrototypeCutFreq;$/;"	m	class:Chebycheff
mPrototypePassFreq	Chebycheff.h	/^    double mPrototypePassFreq;$/;"	m	class:Chebycheff
mSampleRate	Butterworth.h	/^    double mSampleRate;$/;"	m	class:Butterworth
mSampleRate	Chebycheff.h	/^    double mSampleRate;$/;"	m	class:Chebycheff
mSection	Filter.h	/^    BlockDiagram *mSection;$/;"	m	class:Filter
operator =	BlockDiagram.cpp	/^const BlockDiagram &BlockDiagram::operator=(const BlockDiagram &right)$/;"	f	class:BlockDiagram
passFilter	Filter.cpp	/^double Filter::passFilter(double sample)$/;"	f	class:Filter
popPreviousSample	BlockDiagram.h	/^    void popPreviousSample()$/;"	f	class:BlockDiagram
printCharacteristic	Butterworth.cpp	/^void Butterworth::printCharacteristic(char *fNameAmp,char *fNamePhase)$/;"	f	class:Butterworth
printCharacteristic	Chebycheff.cpp	/^void Chebycheff::printCharacteristic(char *fNameAmp,char *fNamePhase)$/;"	f	class:Chebycheff
pushPreviousSample	BlockDiagram.h	/^    void pushPreviousSample(double val)$/;"	f	class:BlockDiagram
selectFilterMode	Filter.h	/^    void selectFilterMode(FilterMode inKindFilter){ mKindFilter = inKindFilter; }$/;"	f	class:Filter
setCutoffFreq	Filter.cpp	/^void Filter::setCutoffFreq(double inCutFreq)$/;"	f	class:Filter
setCutoffFreq	Filter.cpp	/^void Filter::setCutoffFreq(double inLowCutFreq,double inHighCutFreq)$/;"	f	class:Filter
setOrder	BlockDiagram.h	/^    void setOrder(int order){ mOrder = order; }$/;"	f	class:BlockDiagram
setOrderNumber	Filter.h	/^    void setOrderNumber(long inOrder){ mOrderNumber = inOrder; }$/;"	f	class:Filter
setSampleRate	Butterworth.h	/^    void setSampleRate(double inSampleRate){ mSampleRate = inSampleRate; }$/;"	f	class:Butterworth
setSampleRate	Chebycheff.h	/^    void setSampleRate(double inSampleRate){ mSampleRate = inSampleRate; }$/;"	f	class:Chebycheff
transferFunction	Filter.cpp	/^double Filter::transferFunction(double valSample)$/;"	f	class:Filter
what	Filter.h	/^    const char *what() const { return mMessage; }$/;"	f	class:FilterError
~BlockDiagram	BlockDiagram.h	/^    virtual ~BlockDiagram()$/;"	f	class:BlockDiagram
~Butterworth	Butterworth.h	/^    virtual ~Butterworth()$/;"	f	class:Butterworth
~Chebycheff	Chebycheff.h	/^    virtual ~Chebycheff()$/;"	f	class:Chebycheff
~Filter	Filter.h	/^    virtual ~Filter(){ }$/;"	f	class:Filter
